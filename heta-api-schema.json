{
    "openapi": "3.1.0",
    "info": {
      "title": "Heta Compiler API",
      "version": "0.1.0",
      "description": "API for interacting with the Heta Compiler via HTTP."
    },
    "servers": [
      {
        "url": "https://heta-api.insysbio.com/api",
        "description": "Main server for Heta API"
      }
    ],
    "paths": {
      "/build": {
        "post": {
          "operationId": "buildPlatform",
          "summary": "Trigger platform compilation",
          "description": "Compiles a Heta-based platform and generates export files.",
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lifetime": {
                      "type": "number",
                      "default": 3600,
                      "description": "Time in seconds for keeping files on the server."
                    },       
                    "files": {
                      "type": "array",
                      "description": "Array of files of platform.",
                      "items": { "$ref": "#/components/schemas/File" },
                      "example": [
                        {
                          "filepath": "platform.yml",
                          "filebody": "<base64-encoded file content>"
                        },
                        {
                          "filepath": "index.heta",
                          "filebody": "<base64-encoded file content>"
                        }
                      ]
                    },
                    "declaration": {
                      "type": "string",
                      "description": "Heta declaration file for compilation.",
                      "example": "platform.yml"
                    },
                    "source": {
                      "type": "string",
                      "default": "index.heta",
                      "description": "Index file for compilation.",
                      "example": "index.heta"
                    },
                    "type": {
                      "type": "string",
                      "default": "heta",
                      "enum": ["heta", "table", "xlsx", "json", "yaml", "sbml"],
                      "description": "The type of file for compilation.",
                      "example": "heta"
                    },
                    "unitsCheck": {
                      "type": "boolean",
                      "default": false,
                      "description": "Check for unit consistency."
                    },
                    "debug": {
                      "type": "boolean",
                      "default": false,
                      "description": "Enable debugging mode."
                    },
                    "distDir": {
                      "type": "string",
                      "default": "dist",
                      "description": "Path for saving exported files."
                    },
                    "metaDir": {
                      "type": "string",
                      "default": "meta",
                      "description": "Path for saving metadata."
                    },
                    "logMode": {
                      "type": "string",
                      "default": "error",
                      "enum": ["never", "error", "always"],
                      "description": "When to create a log file."
                    },
                    "export": {
                      "$ref": "#/components/schemas/Export"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Compilation finished.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number",
                        "example": 0
                      },
                      "status": {
                        "type": "string",
                        "example": "Compilation OK!"
                      },
                      "filenames": {
                        "type": "array",
                        "description": "Array of filenames.",
                        "items": { "type": "string" }
                      },
                      "logs": {
                        "type": "array",
                        "description": "Array of log messages.",
                        "items": { "type": "string" }
                      },
                      "taskId": {
                        "type": "string",
                        "description": "Task ID for getting files."
                      },
                      "lifeend": {
                        "type": "number",
                        "description": "Time when files will be deleted."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request parameters.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string",
                        "example": "Wrong format of export option."
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string",
                        "example": "Internal Heta compiler error."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/download/{taskId}": {
        "get": {
          "operationId": "downloadFiles",
          "summary": "Download compiled files",
          "description": "Download compiled files by task ID.",
          "parameters": [
            {
              "name": "taskId",
              "in": "path",
              "required": true,
              "description": "Task ID for getting files.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "filenames",
              "in": "query",
              "description": "Filenames for downloading of null for all files.",
              "schema": {
                "type": "array",
                "nullable": true,
                "items": { "type": "string" },
                "example": ["dist/xlsx/table.xlsx", "dist/json/model.json"],
                "default": null
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Files are ready for download.",
              "content": {
                "application/zip": {
                  "schema": {
                    "type": "array",
                    "items": { "type": "string", "format": "binary" }
                  }
                }
              }
            },
            "404": {
              "description": "Files are not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string",
                        "example": "Files are not found."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "operationId": "deleteFiles",
          "summary": "Delete compiled files",
          "description": "Delete compiled files by task ID.",
          "parameters": [
            {
              "name": "taskId",
              "in": "path",
              "required": true,
              "description": "Task ID for getting files.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Files are deleted.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "number",
                        "example": 0
                      },
                      "status": {
                        "type": "string",
                        "example": "Files are deleted."
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Files are not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string",
                        "example": "Files are not found."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/": {
        "get": {
          "operationId": "getInfo",
          "description": "Check connectivity and get information about the Heta Compiler.",
          "responses": {
            "200": {
              "description": "Information about the Heta Compiler.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "version": {
                        "type": "string",
                        "example": "1.0.0"
                      },
                      "Node": {
                        "type": "string",
                        "example": "v14.17.0"
                      },
                      "description": {
                        "type": "string",
                        "example": "Heta Compiler API"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "Export": {
          "type": "array",
          "default": [],
          "description": "Export formats in JSON format.",
          "items": {
            "type": "object",
            "properties": {
              "format": {
                "type": "string",
                "enum": ["JSON", "YAML", "DBSolve", "SLV", "SBML", "Simbio", "Mrgsolve", "Table", "XLSX", "Julia", "Matlab", "Dot", "Summary"],
                "description": "The type of file for compilation."
              },
              "filepath": {
                "type": "string",
                "description": "Path for saving exported files.",
                "example": "model"
              },
              "spaceFilter": {
                "type": "string",
                "description": "Filter for space in RegExp format.",
                "example": "^one|two$"
              },
              "omit": {
                "type": "array",
                "description": "Array of properties paths to exclude from output. Used in JSON, YAML and Table formats.",
                "items": { "type": "string" },
                "example": ["notes", "tags"]
              },
              "noUnitsExpr": {
                "type": "boolean",
                "description": "If false or not set, all units will be written in UnitsExpr format. If true, units will be written in Unit array format. Used in JSON and YAML formats."
              },
              "powTransform": {
                "type": "string",
                "enum": ["keep", "operator", "function"],
                "description": "Transformation of x^y and pow(x, y). Used for DBSolve and SLV formats."
              },
              "version": {
                "type": "string",
                "enum": ["25", "26", "L2V3", "L2V4", "L2V5", "L3V1", "L3V2"],
                "description": "File version for SLV, DBSolve, and SBML formats."
              },
              "eventsOff": {
                "type": "boolean",
                "description": "If true, switchers will not be exported to DBSolve events. Used for SLV format."
              },
              "groupConstBy": {
                "type": "string",
                "description": "How to group const in Initial Values of DBSolve file. Written in JSON path format.",
                "example": "tags[0]"
              },
              "auxAsNotes": {
                "type": "boolean",
                "description": "If true, aux content will be appended to Simbio Notes as JSON object. Used for Simbio format."
              },
              "omitRows": {
                "type": "number",
                "description": "Creates empty rows in output sheets. Used for Table and XLSX formats.",
                "example": 3
              },
              "bookType": {
                "type": "string",
                "enum": ["xlsx", "xlsm", "xlsb", "biff8", "wk3", "csv", "txt", "sylk", "biff5", "biff4", "biff3", "biff2", "html", "dif", "dbf", "wk1", "xlml", "ods", "fods", "rtf", "prn", "eth"],
                "description": "Supported file types for Table format."
              },
              "splitByClass": {
                "type": "boolean",
                "description": "If true, components will be split by class and saved as separate sheets/files. Used for Table and XLSX formats."
              }
            }
          }
        },
        "File": {
          "type": "object",
          "properties": {
            "filepath": {
              "type": "string",
              "description": "Path to the file."
            },
            "filebody": {
              "type": "string",
              "format": "binary",
              "description": "File content."
            }
          }
        }
      }
    }
}
