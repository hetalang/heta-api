{
    "openapi": "3.0.0",
    "info": {
      "title": "Heta Compiler API",
      "version": "0.1.0",
      "description": "API for interacting with the Heta Compiler via HTTP."
    },
    "servers": [
      {
        "url": "https://heta-api.insysbio.com",
        "description": "Main server for Heta API"
      }
    ],
    "paths": {
      "/build": {
        "post": {
          "operationId": "buildPlatform",
          "summary": "Trigger platform compilation",
          "description": "Compiles a Heta-based platform and generates export files. It works synchronously and returns the result immediately. The result includes the list of generated files and logs. The files will be deleted after a certain time.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["files"],
                  "properties": {
                    "lifetime": {
                      "type": "number",
                      "default": 3600,
                      "description": "Time in seconds for keeping files on the server. It is related to the task ID. Default is 1 hour."
                    },
                    "files": {
                      "type": "array",
                      "description": "Array of files of platform.",
                      "minItems": 1,
                      "items": { "$ref": "#/components/schemas/File" },
                      "example": [
                        {
                          "filepath": "platform.yml",
                          "format": "binary",
                          "filebody": "<base64-encoded file content>"
                        },
                        {
                          "filepath": "index.heta",
                          "format": "utf8",
                          "filebody": "include model.heta;\n\n"
                        }
                      ]
                    },
                    "declaration": {
                      "type": "string",
                      "description": "The filepath to declaration file without extension. The command will search the declaration file based on option trying a set of extensions: .json/.yml. If omitted the command will search for the \"platform\" file in the root dir. If default file is not found the default units will be used.",
                      "example": "platform1"
                    },
                    "source": {
                      "type": "string",
                      "description": "Index file for compilation. Can e stated in API, declarion file or the compiler will use default path index.heta",
                      "example": "index.heta"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["heta", "table", "xlsx", "json", "yaml", "sbml"],
                      "description": "The type of file for compilation.",
                      "example": "heta"
                    },
                    "unitsCheck": {
                      "type": "boolean",
                      "description": "Check for unit consistency. If 'true' the command will check the units consistency in the platform. If 'false' (default) the command will skip the units check."
                    },
                    "debug": {
                      "type": "boolean",
                      "description": "Enable debugging mode."
                    },
                    "distDir": {
                      "type": "string",
                      "description": "Path for saving exported files as stated in 'export' option."
                    },
                    "metaDir": {
                      "type": "string",
                      "description": "Path for saving metadata. Used for debugging when option 'debug: true'."
                    },
                    "logMode": {
                      "type": "string",
                      "enum": ["never", "error", "always"],
                      "description": "When to create a log file."
                    },
                    "export": {
                      "$ref": "#/components/schemas/Export"
                    }
                  },
                  "example": {
                    "lifetime": 1800,
                    "files": [
                      {
                        "filepath": "index.heta",
                        "format": "utf8",
                        "filebody": "x1 @Record := 1.2;\n\nc1 @Compartment .= 5;"
                      }
                    ],
                    "unitsCheck": true,
                    "export": [
                      { "format": "JSON" },
                      { "format": "YAML" },
                      { "format": "DBSolve", "version": "25" },
                      { "format": "SBML", "version": "L3V2" },
                      { "format": "Simbio" },
                      { "format": "Mrgsolve" },
                      { "format": "Table", "splitByClass": true, "omitRows": 3, "bookType": "xlsx" },
                      { "format": "Matlab" },
                      { "format": "Dot" },
                      { "format": "Summary" }
                    ]
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Compilation finished.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "filepaths": {
                        "type": "array",
                        "description": "Array of filepaths for the generated files.",
                        "items": { "type": "string" }
                      },
                      "logs": {
                        "type": "array",
                        "description": "Array of log messages.",
                        "items": { "type": "string" }
                      },
                      "taskId": {
                        "type": "string",
                        "description": "Task ID for getting files in UIDs format.",
                        "example": "5f7b1b7b-0b7b-4b7b-8b7b-0b7b7b7b7b7b"
                      },
                      "lifeend": {
                        "type": "number",
                        "description": "Time when files will be deleted in Unix timestamp seconds format.",
                        "example": 1634025600
                      }
                    },
                    "example": {
                      "filepaths": [
                        "index.heta",
                        "dist/json/model.json",
                        "dist/yaml/model.yaml",
                        "dist/dbsolve/model.slv",
                        "dist/sbml/model.xml",
                        "dist/simbio/model.m",
                        "dist/mrgsolve/model.cpp",
                        "dist/mrgsolve/run.R",
                        "dist/table/model.xlsx"
                      ],
                      "logs": ["Compilation finished successfully."],
                      "taskId": "5f7b1b7b-0b7b-4b7b-8b7b-0b7b7b7b7b7b",
                      "lifeend": 1634025600
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable entity. The request is well-formed but unable to process. Compilation finished but with errors. This is usually because of platform files misconfiguration not related to the compiler or API.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "filepaths": {
                        "type": "array",
                        "description": "Array of filepaths for the generated files.",
                        "items": { "type": "string" }
                      },
                      "logs": {
                        "type": "array",
                        "description": "Array of log messages.",
                        "items": { "type": "string" }
                      },
                      "taskId": {
                        "type": "string",
                        "description": "Task ID for getting files in UIDs format.",
                        "example": "5f7b1b7b-0b7b-4b7b-8b7b-0b7b7b7b7b7b"
                      },
                      "lifeend": {
                        "type": "number",
                        "description": "Time when files will be deleted in Unix timestamp seconds format.",
                        "example": 1634025600
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request parameters. Request structure do not match the schema. Issues with user's API request.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "ValidationError"
                      },
                      "message": {
                        "type": "string",
                        "example": "Wrong format of export option."
                      },
                      "errors": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error. Some critical error occurred during compilation. Problem with heta-compiler or api application development.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Internal Heta compiler error."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/files/{taskId}": {
        "get": {
          "operationId": "downloadFile",
          "summary": "Download file",
          "description": "Download a file associated with a specific task ID and file path.",
          "parameters": [
            {
              "name": "taskId",
              "in": "path",
              "required": true,
              "description": "Unique task ID.",
              "schema": {
                "type": "string",
                "example": "9cc63441-a35c-4e41-b62c-505532fd79a6"
              }
            },
            {
              "name": "filepath",
              "in": "query",
              "required": true,
              "allowReserved": true,
              "description": "Relative file path within the task directory or * to download all files as ZIP file.",
              "schema": {
                "type": "string",
                "example": "src/index.heta"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "File is ready for download.",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "404": {
              "description": "File is not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "string",
                        "example": "File is not found."
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error. Problem in api application developed.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unknown error."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/": {
        "get": {
          "operationId": "getInfo",
          "description": "Check connectivity and get information about the Heta Compiler.",
          "responses": {
            "200": {
              "description": "Information about the Heta Compiler.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "version": {
                        "type": "string",
                        "example": "1.0.0"
                      },
                      "node": {
                        "type": "string",
                        "example": "v14.17.0"
                      },
                      "description": {
                        "type": "string",
                        "example": "Heta Compiler API"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/schema": {
        "get": {
          "operationId": "getSchema",
          "description": "Get the OpenAPI schema for the Heta Compiler API.",
          "responses": {
            "200": {
              "description": "OpenAPI schema for the Heta Compiler API.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "Export": {
          "type": "array",
          "default": [],
          "description": "Array of export formats. If omitted nothing wll be exported which is useful for testing correctness of platform.",
          "items": {
            "type": "object",
            "required": ["format"],
            "properties": {
              "format": {
                "type": "string",
                "enum": ["JSON", "YAML", "DBSolve", "SLV", "SBML", "Simbio", "Mrgsolve", "Table", "XLSX", "Julia", "Matlab", "Dot", "Summary"],
                "description": "The type of file for compilation. Case sensitive."
              },
              "filepath": {
                "type": "string",
                "description": "Path for saving exported files. If omitted the files will be saved in the directory name depending on the format.",
                "example": "model"
              },
              "spaceFilter": {
                "type": "string",
                "description": "Filter for space in RegExp format.",
                "example": "^one|two$"
              },
              "omit": {
                "type": "array",
                "description": "Array of properties paths to exclude from output. Used in JSON, YAML and Table formats.",
                "items": { "type": "string" },
                "example": ["notes", "tags"]
              },
              "noUnitsExpr": {
                "type": "boolean",
                "description": "If false or not set, all units will be written in UnitsExpr format. If true, units will be written in Unit array format. Used in JSON and YAML formats."
              },
              "powTransform": {
                "type": "string",
                "enum": ["keep", "operator", "function"],
                "description": "Transformation of x^y and pow(x, y). Used for DBSolve and SLV formats."
              },
              "version": {
                "type": "string",
                "enum": ["25", "26", "L2V3", "L2V4", "L2V5", "L3V1", "L3V2"],
                "description": "File version for SLV, DBSolve, and SBML formats."
              },
              "eventsOff": {
                "type": "boolean",
                "description": "If true, switchers will not be exported to DBSolve events. Used for SLV format."
              },
              "groupConstBy": {
                "type": "string",
                "description": "How to group const in Initial Values of DBSolve file. Written in JSON path format.",
                "example": "tags[0]"
              },
              "auxAsNotes": {
                "type": "boolean",
                "description": "If true, aux content will be appended to Simbio Notes as JSON object. Used for Simbio format."
              },
              "omitRows": {
                "type": "number",
                "description": "Creates empty rows in output sheets. Used for Table and XLSX formats.",
                "example": 3
              },
              "bookType": {
                "type": "string",
                "enum": ["xlsx", "xlsm", "xlsb", "biff8", "wk3", "csv", "txt", "sylk", "biff5", "biff4", "biff3", "biff2", "html", "dif", "dbf", "wk1", "xlml", "ods", "fods", "rtf", "prn", "eth"],
                "description": "Supported file types for Table format."
              },
              "splitByClass": {
                "type": "boolean",
                "description": "If true, components will be split by class and saved as separate sheets/files. Used for Table and XLSX formats."
              }
            }
          }
        },
        "File": {
          "type": "object",
          "properties": {
            "filepath": {
              "type": "string",
              "description": "Path to the file."
            },
            "format": {
              "type": "string",
              "enum": ["binary", "utf8"],
              "default": "utf8",
              "description": "The type of file for compilation."
            },
            "filebody": {
              "type": "string",
              "description": "File content as binary or plain string."
            }
          }
        }
      }
    }
}
